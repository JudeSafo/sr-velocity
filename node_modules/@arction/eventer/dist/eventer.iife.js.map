{"version":3,"file":"eventer.iife.js","sources":["../src/eventer.ts"],"sourcesContent":["/**\r\n * Eventer error message, adds 'EventError:' prefix to error message\r\n */\r\nexport class EventError extends Error {\r\n    constructor(m: string) {\r\n        const errorMessage = `EventError: ${m}}`\r\n        super(errorMessage)\r\n        // Stupid workaround for a smooth support of ES5\r\n        Object.setPrototypeOf(this, EventError.prototype)\r\n    }\r\n}\r\n/**\r\n * Event Listener interface\r\n */\r\nexport type Listener = (...args: any[]) => void\r\n/**\r\n * Subscription representation\r\n */\r\nexport interface Token {\r\n    /**\r\n     * Unique token ID\r\n     */\r\n    readonly token: string,\r\n    /**\r\n     * ID of Eventer issued the token\r\n     */\r\n    readonly ownerIndex: number,\r\n    /**\r\n     * Internal token ID, might be in collision with another Eventer instance\r\n     */\r\n    readonly id: number\r\n}\r\n/**\r\n * @param ownerIndex Index of Eventer\r\n * @param id         Index of current subscription\r\n * @return           Unique Token\r\n */\r\nexport const Token = (ownerIndex: number, id: number): Token => ({\r\n    token: `${ownerIndex}-${id}`,\r\n    ownerIndex,\r\n    id\r\n})\r\n// Every eventer has to have unique id across an app\r\nlet lastId = 0\r\n/**\r\n * Creates Error for non-existing event listener.\r\n * The Error message is used in multiple occasions.\r\n * @param token Token of non-existing event\r\n * @param id    Eventer id\r\n */\r\nconst notExistReport = (token: Token, id: number) =>\r\n    new EventError(`Event listener with ${token.token} id does not exist at Eventer with ${id} id.`)\r\n/**\r\n * Pub/Sub for internal event scheduling.\r\n * All functions are for protected usage.\r\n * Sub class can use them for implementation of event dispaching.\r\n * @property  id  Unique Eventer id\r\n */\r\nexport class Eventer {\r\n    /**\r\n     * Unique id\r\n     */\r\n    readonly id = ++lastId\r\n    /**\r\n     * Index of last issued token\r\n     */\r\n    private lastEventIndex = 0\r\n    /**\r\n     * Collection of topics\r\n     */\r\n    private readonly topics: Map<string, Map<Token, Listener>> = new Map()\r\n    /**\r\n     *\r\n     */\r\n    constructor() { }\r\n    /**\r\n     * Register subscription on the topic with provided listener\r\n     * @param topic     Topic name\r\n     * @param listener  Event listener\r\n     * @param oldToken  Old token, if it has to be reused\r\n     */\r\n    on(topic: string, listener: Listener, oldToken?: Token): Token {\r\n        const listeners = this.topics.get(topic)\r\n        // use old token or create unique one\r\n        const token = oldToken ? oldToken : Token(this.id, ++this.lastEventIndex)\r\n        if (listeners)\r\n            //add listener to the topic\r\n            listeners.set(token, listener)\r\n        else\r\n            //create new topic with the listener\r\n            this.topics.set(topic, new Map([[token, listener]]))\r\n        return token\r\n    }\r\n    /**\r\n     * Check if listener with provided token exists\r\n     * @param token Token of desired listener\r\n     * @param topic Topic which has to contain the listener\r\n     * @return      Error with message or Listener\r\n     */\r\n    has(token: Token, topic?: string): EventError | Listener {\r\n        //if topic is specified\r\n        if (topic) {\r\n            // request all listeners subscribed to the topic\r\n            const listeners = this.topics.get(topic)\r\n            if (listeners) {\r\n                // request listener with the token\r\n                const listener = listeners.get(token)\r\n                if (listener)\r\n                    // return the listener if it is defined\r\n                    return listener\r\n                else\r\n                    // return error if it is not defined\r\n                    return notExistReport(token, this.id)\r\n            } else\r\n                // return error if topic is empty\r\n                return new EventError(`Eventer with ${token.ownerIndex} does not have ${topic}.`)\r\n        } else {\r\n            //iterate over all topics\r\n            for (const [_, listeners] of this.topics) {\r\n                //check if it has listener with desired token\r\n                const listener = listeners.get(token)\r\n                if (listener)\r\n                    //return the listener\r\n                    return listener\r\n            }\r\n            // return an error with none of topics contains listeners with desired token.\r\n            return notExistReport(token, this.id)\r\n        }\r\n    }\r\n    /**\r\n     * Remove listener with provided token\r\n     * @param token Token of the listener\r\n     * @param topic Topic which has to contain the listener\r\n     * @return      True if the listener is successfully removed and false if it is not found\r\n     */\r\n    off(token: Token, topic?: string) {\r\n        //if topic is specified\r\n        if (topic) {\r\n            // request all listeners subscribed to the topic\r\n            const listeners = this.topics.get(topic)\r\n            if (listeners)\r\n                // check listener with the token existance\r\n                if (listeners.delete(token))\r\n                    return true\r\n            // return false with the topic does not contain listener with specified token\r\n            return false\r\n        } else {\r\n            //itarate over all topics\r\n            for (const [_, listeners] of this.topics)\r\n                // check listener with the token existance\r\n                if (listeners.delete(token))\r\n                    return true\r\n            // return false with all topics do not contain listener with specified token\r\n            return false\r\n        }\r\n    }\r\n    /**\r\n     * Remove all topics with all listeners\r\n     */\r\n    allOff() {\r\n        this.topics.clear()\r\n        return this\r\n    }\r\n    /**\r\n     * Remove topic with all listeners\r\n     * @param topic Topic name\r\n     * @return      True if the topic is successfully removed and false if it is not found\r\n     */\r\n    topicOff(topic: string) {\r\n        return this.topics.delete(topic)\r\n    }\r\n    /**\r\n     * Emit event and call subscribed listeners\r\n     * @param   topic Topic name\r\n     * @param   args  Array of arguments\r\n     * @return        Number of listeners called\r\n     */\r\n    emit(topic: string, ...args: Array<any>): number {\r\n        // request all listeners subscribed to the topic\r\n        const listeners = this.topics.get(topic)\r\n        let numberOfListeners = 0\r\n        // if listerens exist\r\n        if (listeners)\r\n            // iterate over\r\n            listeners.forEach((listener) => {\r\n                // call listener\r\n                listener(...args)\r\n                numberOfListeners++\r\n            })\r\n        return numberOfListeners\r\n    }\r\n    /**\r\n     * Get All listeners at the topic\r\n     * @param topic Topic name\r\n     */\r\n    listeners(topic: string) {\r\n        const listeners = this.topics.get(topic)\r\n        if (listeners)\r\n            return listeners\r\n        else\r\n            return new Map<Token, Listener>()\r\n    }\r\n}\r\n"],"names":["tslib_1.__extends","tslib_1.__values"],"mappings":"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"}